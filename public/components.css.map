{
  "version": 3,
  "file": "components.css",
  "sources": [
    "../src/pages/urls.svelte",
    "../src/components/Layout/index.svelte",
    "../src/components/Base/Form/Image.svelte"
  ],
  "sourcesContent": [
    "<style>\n  .container {\n    margin: 2em auto;\n    width: 600px;\n  }\n  .files,\n  .paths {\n    display: inline-block;\n  }\n  .paths {\n    float: right;\n  }\n  a {\n    display: block;\n  }\n  .pagedir {\n    color: #555;\n  }\n</style>\n\n<script>\n  export let routes\n  const _routes = routes.map((route, i) => {\n    route.url = route.path\n      .replace('[collection]', 'posts')\n      .replace('[id]', '1')\n      .replace(/index$/, '')\n    return routes\n  })\n  const params = {\n    foo: 'bar',\n    baz: 'booze',\n  }\n</script>\n\n<div class=\"content\">\n  <div>File: src/pages/index.svelte</div>\n\n  <div class=\"container\">\n    <div class=\"files\">\n      <strong>Files in src/pages</strong>\n      {#each routes as route}\n        <div class=\"file\">\n          <span>.{route.path}.svelte</span>\n        </div>\n      {/each}\n    </div>\n    <div class=\"paths\">\n      <strong>Generated URLS</strong>\n      {#each routes as route}\n        <a href={route.url} {params}>{route.url}</a>\n      {/each}\n    </div>\n  </div>\n\n</div>\n",
    "<nu-flex transition=\"all 1.5s\" overflow=\"no\" responsive=\"1280px|960px|640px\" flow=\"row\" height=\"100vh\">\n  <nu-theme hue=\"250\" saturation=\"auto\" padding=\".5\" border-radius=\".5\" border-width=\"1px\" animation-time=\"0.08s\" />\n  <nu-theme name=\"violet\" hue=\"277\" />\n\n  <Sidebar />\n  <nu-grid overflow=\"no\" width=\"100%\" low=\"column\" rows=\"70px 1fr\">\n    <Header />\n    <slot>\n      <!-- optional fallback -->\n    </slot>\n\n  </nu-grid>\n</nu-flex>\n\n<script>\n  import Header from './Header.svelte'\n  import Sidebar from './Sidebar'\n  import Body from './Body.svelte'\n\n\n</script>\n\n<style>\n  :global(body) {\n    overflow: hidden;\n  }\n</style>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  function getImages() {\n    let imgs = data;\n    if(!multiple)\n    imgs = data[0];\n    dispatch(\"images\", imgs);\n  }\n  let images;\n  let selected = 0;\n  let data = [];\n  export let update = false;\n  export let id;\n  export let multiple = true;\n\n  $: getImages(data);\n\n  function saveImages() {\n    for (var i = 0; i < images.length; i++) {\n      let image = images[i];\n\n      getBase64(images[i]).then(res => {\n        let img = {};\n        img.name = image.name.substr(image.name, image.name.indexOf(\".\"));\n        if (update) Object.assign(img,id) ;\n        img.is_main = selected == i;\n        img.alt = img.name;\n        img.image = res;\n        img.extension = image.name.substr(image.name.indexOf(\".\") + 1);\n        data = [...data, img];\n      });\n    }\n    setTimeout(() => {\n      getImages();\n    }, 500);\n  }\n  async function getBase64(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = error => reject(error);\n    });\n  }\n  function check(index) {\n    for (var i = 0; i < data.length; i++) {\n      if (i != index) {\n        data[i].is_main = false;\n      }\n    }\n  }\n</script>\n\n<style>\n  .image-container {\n    border: 1px solid gray;\n    display: flex;\n    margin-bottom: 5px;\n  }\n</style>\n\n{#each data as dt, index}\n  <div class=\"image-container\">\n    <img src={dt.image} alt={dt.name} class=\"pyrex-crud-image\" />\n    <div>\n      <input type=\"text\" bind:value={dt.name} placeholder=\"Название\" />\n      <input type=\"text\" bind:value={dt.alt} placeholder=\"SEO Тэг\" />\n      <label for=\"is_main\">Главное изображение</label>\n      <input\n        name=\"is_main\"\n        bind:checked={dt.is_main}\n        type=\"checkbox\"\n        on:change={() => check(index)} />\n\n    </div>\n  </div>\n{/each}\n\n<input\n  id=\"input\"\n  on:change={saveImages}\n  bind:files={images}\n  type=\"file\"\n  multiple />\n"
  ],
  "names": [],
  "mappings": "AACE,UAAU,cAAC,CAAC,AACV,MAAM,CAAE,GAAG,CAAC,IAAI,CAChB,KAAK,CAAE,KAAK,AACd,CAAC,AACD,oBAAM,CACN,MAAM,cAAC,CAAC,AACN,OAAO,CAAE,YAAY,AACvB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,KAAK,AACd,CAAC,AACD,CAAC,cAAC,CAAC,AACD,OAAO,CAAE,KAAK,AAChB,CAAC;ACSO,IAAI,AAAE,CAAC,AACb,QAAQ,CAAE,MAAM,AAClB,CAAC;ACgCD,gBAAgB,cAAC,CAAC,AAChB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,GAAG,AACpB,CAAC"
}